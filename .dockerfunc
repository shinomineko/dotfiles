#!/bin/bash

dcleanup() {
	local containers
	mapfile -t containers < <(docker ps -aq 2>/dev/null)
	docker rm "${containers[@]}" 2>/dev/null

	local volumes
	mapfile -t volumes < <(docker ps --filter status=exited -q 2>/dev/null)
	docker rm -v "${volumes[@]}" 2>/dev/null

	local images
	mapfile -t images < <(docker images --filter dangling=true -q 2>/dev/null)
	docker rmi "${images[@]}" 2>/dev/null
}

relies_on() {
	for container in "$@"; do
		local state
		state=$(docker inspect -f "{{.State.Running}}" "$container" 2>/dev/null)
		if [[ "$state" == "false" || "$state" == "" ]]; then
			echo "$container is not running, starting it"
			$container
		fi
	done
}

rm_stopped() {
	local name="$1"
	local state
	state=$(docker inspect -f "{{.State.Running}}" "$name" 2>/dev/null)
	if [[ "$state" == "false" ]]; then
		docker rm "$name"
	fi
}

aria2() {
	docker run -it --rm \
		-v "${DOWNLOADDIR:-$HOME/Downloads}:/aria2/download" \
		-v "${HOME}/.config/aria2/aria2.conf:/root/.config/aria2/aria2.conf" \
		shinomineko/aria2 "$@"
}

aws() {
	docker run -it --rm \
		--name aws \
		-v "${HOME}/.aws:/root/.aws:ro" \
		-e AWS_DEFAULT_REGION \
		-e AWS_ACCESS_KEY_ID \
		-e AWS_SECRET_ACCESS_KEY \
		-e AWS_SESSION_TOKEN \
		--log-driver none \
		amazon/aws-cli "$@"
}

htpasswd() {
	docker run -it --rm \
		--name htpasswd \
		--net none \
		--log-driver none \
		shinomineko/htpasswd "$@"
}

http() {
	docker run -t --rm \
		--log-driver none \
		shinomineko/httpie "$@"
}

nc() {
	docker run -it --rm \
		--net host \
		--entrypoint nc \
		shinomineko/toolbox "$@"
}

nmap() {
	docker run -it --rm \
		--net host \
		shinomineko/nmap "$@"
}

squid() {
	rm_stopped squid
	docker run -d \
		--name squid \
		-p 3128:3128 \
		shinomineko/squid "$@"

	sudo hostess add squid "$(docker inspect -f '{{.NetworkSettings.Networks.bridge.IPAddress}}' squid)"
}

torproxy() {
	rm_stopped torproxy
	docker run -d \
		--restart always \
		--name torproxy \
		-v /etc/localtime:/etc/localtime:ro \
		-p 9050:9050 \
		shinomineko/torproxy
}

transmission() {
	rm_stopped transmission
	docker run -d \
		--name transmission \
		-v /etc/localtime:/etc/localtime:ro \
		-v "${DOWNLOADDIR:-$HOME/Downloads}:/transmission/download" \
		-v "${HOME}/.transmission:/transmission/config" \
		-p 9091:9091 \
		-p 51413:51413 \
		-p 51413:51413/udp \
		shinomineko/transmission
}

trivy() {
	docker run --rm \
		-v /var/run/docker.sock:/var/run/docker.sock \
		-v "${HOME}/.cache:/root/.cache" \
		aquasec/trivy "$@"
}
